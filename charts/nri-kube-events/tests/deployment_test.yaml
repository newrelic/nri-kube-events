suite: test deployment images
templates:
  - templates/deployment.yaml
release:
  name: my-release
  namespace: my-namespace
tests:
  - it: deployment image uses pullSecrets
    set:
      cluster: my-cluster
      licenseKey: us-whatever
      image:
        pullSecrets:
          - name: regsecret
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: regsecret
  - it: deployment images use the proper image tag
    set:
      cluster: test-cluster
      licenseKey: us-whatever
      image:
        kubeEvents:
          repository: newrelic/nri-kube-events
          tag: "latest"
        infraAgent:
          repository: newrelic/k8s-events-forwarder
          tag: "latest"
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].image
          pattern: .*newrelic/nri-kube-events:latest$
      - matchRegex:
          path: spec.template.spec.containers[1].image
          pattern: .*newrelic/k8s-events-forwarder:latest$
  - it: adds proxy when enabled
    set:
      cluster: test-cluster
      proxy: "https://proxy:1234"
    asserts:
      - contains:
          path: spec.template.spec.containers[1].env
          content:
            name: NRIA_PROXY
            value: "https://proxy:1234"
  - it: set to defaults when no podSecurityContext set
    set:
      cluster: my-cluster
    asserts:
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
  - it: set podSecurityContext custom values
    set:
      cluster: test-cluster
      podSecurityContext:
        foobar: true
    asserts:
      - equal:
          path: spec.template.spec.securityContext.foobar
          value: true
  - it: set to defaults when no containerSecurityContext set
    set:
      cluster: my-cluster
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext.privileged
          value: false
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false
      - equal:
          path: spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem
          value: true
      - equal:
          path: spec.template.spec.containers[1].securityContext
          value:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
  - it: set containerSecurityContext custom values
    set:
      cluster: test-cluster
      containerSecurityContext:
        foobar: true
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext.foobar
          value: true
      - equal:
          path: spec.template.spec.containers[1].securityContext.foobar
          value: true
  - it: uses securityContext compatibility layer
    set:
      cluster: test-cluster
      runAsUser: 1001
    asserts:
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1001
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
  - it: uses securityContext compatibility layer
    set:
      cluster: test-cluster
      runAsUser: 1001
    asserts:
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1001
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
  - it: adds customAttributes when enabled
    set:
      cluster: test-cluster
      customAttributes:
        test_tag_label: test_tag_value
    asserts:
      - contains:
          path: spec.template.spec.containers[1].env
          content:
            name: NRIA_CUSTOM_ATTRIBUTES
            value: '{"test_tag_label":"test_tag_value"}'
