name: Pre-release and Release pipeline

on:
  release:
    types: [ prereleased, released ]
    tags:
      - 'v*'

env:
  ORIGINAL_REPO_NAME: ${{ github.event.repository.full_name }}
  CHART_DIRECTORY: 'charts/nri-kube-events'

jobs:
  docker-integration:
    name: Release docker images and config
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.set-new-version.outputs.new-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Build args
        id: set-new-version
        run: |
          echo "DATE=`date`" >> $GITHUB_ENV
          echo "${{ github.event.release.tag_name }}" | grep -E '^[v]?[0-9.]*[0-9]$'
          echo "TAG=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')" >> $GITHUB_ENV
          echo "new-version=$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Prerelease image tags
        if: ${{ github.event.release.prerelease }}
        run: |
          echo "DOCKER_IMAGE_TAGS=newrelic/nri-kube-events:${{ env.TAG }}-pre" >> $GITHUB_ENV
      - name: Release image tags
        if: ${{ ! github.event.release.prerelease }}
        run: |
          echo "DOCKER_IMAGE_TAGS=newrelic/nri-kube-events:${{ env.TAG }},newrelic/nri-kube-events:latest" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.FSI_DOCKERHUB_USERNAME }}
          password: ${{ secrets.FSI_DOCKERHUB_TOKEN }}
      - name: Build and push docker image
        uses: docker/build-push-action@v5
        with:
          build-args: |
            "COMMIT=${{ github.sha }}"
            "DATE=${{ env.DATE }}"
            "TAG=${{ env.TAG }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          push: true
          platforms: |
            linux/amd64
            linux/arm64
            linux/arm
          tags: ${{ env.DOCKER_IMAGE_TAGS }}

  open-pr:
    name: Update version and appVersion and open pr
    needs: [ docker-integration ]
    runs-on: ubuntu-latest
    # run only for releases (not prereleases)
    if: ${{ ! github.event.release.prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find new appVersion
        id: find-version
        run: |
          echo "NEW_APP_VERSION=${{ needs.docker-integration.outputs.new-version }}" >> $GITHUB_ENV
          echo "new app version: $NEW_APP_VERSION"

      - name: Find current appVersion
        id: original_version
        run: |
          ORIGINAL_APP_VERSION=$(yq eval '.appVersion' ${{ env.CHART_DIRECTORY }}/Chart.yaml)
          echo "original app version: $ORIGINAL_APP_VERSION"
          echo "ORIGINAL_APP_VERSION=$ORIGINAL_APP_VERSION" >> $GITHUB_ENV

      - name: Find current helm chart version
        run: |
          CURRENT_VERSION=$(yq eval '.version' ${{ env.CHART_DIRECTORY }}/Chart.yaml)
          echo "version: $CURRENT_VERSION"
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Set up Golang
        uses: actions/setup-go@v4
        with:
          go-version: 1.19.11

      - name: Find next helm chart version
        run: |
          NEXT_VERSION=$(go run ./src/utils/version-update.go "$CURRENT_VERSION" "$ORIGINAL_APP_VERSION" "$NEW_APP_VERSION")
          echo "Next helm chart version: $NEXT_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Update version helm chart
        # fail the workflow if newVersion is "error", otherwise set the new versions and continue with opening pr
        run: |
          if [ "${NEXT_VERSION}" != 'error' ]; then
            echo "new appVersion to set: ${NEW_APP_VERSION}"
            echo "new version to set: ${NEXT_VERSION}"
            yq eval --inplace ".appVersion=\"${NEW_APP_VERSION}\"" "${{ env.CHART_DIRECTORY }}/Chart.yaml"
            yq eval --inplace ".version=\"${NEXT_VERSION}\"" "${{ env.CHART_DIRECTORY }}/Chart.yaml"
          else
            echo "Error: newVersion is 'error'."
            exit 1
          fi

      - name: Install Helm Docs
        run: |
          wget https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.tar.gz
          tar --extract --verbose --file helm-docs_1.11.0_Linux_x86_64.tar.gz
          sudo mv helm-docs /usr/local/sbin

      - name: Run Helm Docs
        run: |
          helm-docs

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Commit Changes
        run: |
          git checkout -b update-chart-version-${{ github.sha }}
          git branch --all
          git add ${{ env.CHART_DIRECTORY }}/Chart.yaml
          git add ${{ env.CHART_DIRECTORY }}/README.md
          git commit --message="feat(ci): Bump versions and update docs"

      - name: Push Changes
        run: git push origin update-chart-version-${{ github.sha }}

      - name: Open pull request
        run: gh pr create -B main -H update-chart-version-${{ github.sha }} --title 'Bump version and update docs' --body 'Bump version and appVersion and results of running helm docs as part of release automation.'
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-failure:
    if: ${{ always() && failure() }}
    needs: [ open-pr ]
    runs-on: ubuntu-latest
    steps:
      - name: Notify failure via Slack
        uses: archive/github-actions-slack@v2
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.K8S_AGENTS_SLACK_TOKEN }}
          slack-channel: ${{ secrets.K8S_AGENTS_SLACK_CHANNEL }}
          slack-text: "‚ùå `${{ env.ORIGINAL_REPO_NAME }}`: <${{ github.server_url }}/${{ env.ORIGINAL_REPO_NAME }}/actions/runs/${{ github.run_id }}|release pipeline failed>."
